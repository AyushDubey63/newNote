import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {  checkUser, createUser, fetchAllUsers, fetchUserById, signOut, updateUser } from './userAPI';

const initialState = {
  user: [],
  loggedInUser: null,
  error:null,
  status: 'idle',
};

export const fetchAllUserAsync = createAsyncThunk(
  'user/fetchUsers',
  async () => {
    const response = await fetchAllUsers();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const createUserAsync = createAsyncThunk(
  'user/createUser',
  async (userData) => {
    const response = await createUser(userData);
    return response.data;
  }
);

export const checkUserAsync = createAsyncThunk(
  'user/checkUser',
  async (userData) => {
    const response = await checkUser(userData);
    return response.data;
  }
);

export const updateUserAsync = createAsyncThunk(
  "user/update",
  async (update) => {
    const response = await updateUser(update);
    return response.data; // Assuming your API returns the updated note
  }
);

export const signOutAsync = createAsyncThunk(
  'user/signOut',
  async (loginInfo) => {
    const response = await signOut(loginInfo);
    return response.data;
  }
);



export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    .addCase(createUserAsync.pending, (state) => {
      state.status = 'loading';
    })
    .addCase(createUserAsync.fulfilled, (state, action) => {
      state.status = 'idle';
      state.user.push(action.payload);
      state.loggedInUser = action.payload;
    })
    .addCase(checkUserAsync.pending, (state) => {
      state.status = 'loading';
    })
    .addCase(checkUserAsync.fulfilled, (state, action) => {
      state.status = 'idle';
      state.loggedInUser =action.payload;
    })
    .addCase(checkUserAsync.rejected, (state, action) => {
      state.status = 'idle';
      state.error =action.error;
    })
    .addCase(fetchAllUserAsync.pending, (state) => {
        state.status = 'loading';
      })
    .addCase(fetchAllUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.user = action.payload;
    })
    .addCase(updateUserAsync.fulfilled, (state, action) => {
      const update = action.payload;
      const index = state.user.findIndex((elem) => elem.id === update.id);
      if (index !== -1) {
        state.user[index] = update;
      }
    })
    .addCase(signOutAsync.pending, (state) => {
      state.status = 'loading';
    })
    .addCase(signOutAsync.fulfilled, (state, action) => {
      state.status = 'idle';
      state.loggedInUser = null;
    })
    
  },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAllUser = (state) => state.user.user;
export const selectLoggedInUser = (state) => state.user.loggedInUser;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default userSlice.reducer;
